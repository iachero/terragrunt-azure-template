trigger:
  - main

parameters:
  - name: action
    displayName: |
      🔧 Ação a ser executada no Terraform onde : 
      - plan:
         Gera um plano de execução, mostrando quais ações serão tomadas sem fazer nenhuma alteração.
      - apply:
         Executa as ações propostas no plano, fazendo alterações na infraestrutura.
      - destroy:
         Remove todos os recursos gerenciados pela configuração, desmontando efetivamente a infraestrutura.
      - none:
         Indica que nenhuma ação deve ser tomada.
      - run-all:
         Executa as ações de plano e aplicação para todas as configurações.
      - apply-target:
         Aplica mudanças a um alvo específico dentro da configuração.    
      > Aviso: A opção "run-all" executará a ação em todos os módulos do projeto e pode comprometer a infra ## - 🏴‍☠️ - MUITO CUIDADO # 
    default: none
    type: string
    values:
      - plan
      - apply
      - destroy
      - none
      - run-all
      - apply-target

  - name: terraform_version
    displayName: 🌍 Versão do Terraform
    default: 1.10.5
    type: string
    values:
      - latest
      - 1.10.5
      - 1.9.8

  - name: terragrunt_version
    displayName: 🌍 Versão do Terragrunt
    default: 0.67.9
    type: string
    values:
      - latest
      - 0.31.8
      - 0.31.7
      - 0.67.9

  - name: environment
    displayName: 🌐 Qual ambiente vai rodar
    default: az-csh-dev
    type: string
    values:
      - az-csh-dev
      - az-csh-prod

  - name: resource
    displayName: |
      🛠️ Recurso alvo do projeto Terragrunt ||
      Equivalente ao -c no script de deploy que aponta o recurso:
      app, networking, resource-group, etc.
      > Aviso: Se a opção de deploy de todos os recursos abaixo for escolhida, 
      este parâmetro será ignorado e pode conter qualquer valor.
    type: string
    values:
      - app
      - networking
      - resource-group
      - storage
      - vnet
      - vm
      - jenkins
      - prometheus

  - name: geo_location
    displayName: 🌍 Localização dentro do projeto Terraform (não equivale ao "location" do Azure)
    default: 'us'
    type: string
    values:
      - 'us'
      - 'br'
pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: csh-terragrunt-environments
  - name: environment
    value: ${{ parameters.environment }}
  - name: resource
    value: ${{ parameters.resource }}
  - name: geo_location
    value: ${{ parameters.geo_location }}
  - name: STORAGE_ACCOUNT_NAME
    value: tfstatecsh
  - name: CONTAINER_NAME
    value: tfstate
  - name: RESOURCE_GROUP_NAME
    value: terraform-state-csh

jobs:
  - job: "TerragruntWorkflow"
    displayName: '🚀 - Fluxo de Trabalho do Terragrunt'
    

    steps:
      - bash: |
          echo "##vso[task.setvariable variable=AgentName;isoutput=true]$(Agent.Name)"
        name: passOutput
        displayName: '🖥️ - Capturar Nome do Agente'

      - task: DownloadSecureFile@1
        name: downloadPrivateKey
        displayName: 'Download Private SSH Key'
        inputs:
          secureFile: 'id_rsa'

      - task: DownloadSecureFile@1
        name: downloadPublicKey
        displayName: 'Download Public SSH Key'
        inputs:
          secureFile: 'id_rsa.pub'
          displayName: '🔑 - Baixando Chave SSH'

      - task: DownloadSecureFile@1
        name: downloadAzFIle
        displayName: 'Download Azure credennials File'
        inputs:
          secureFile: '.azure_creds'
          displayName: '🔑 - Baixando Credenciais do Azure'

      - script: |
          # Criar o diretório .ssh se não existir
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Adicionar a chave privada e pública
          cp $(downloadPrivateKey.secureFilePath) ~/.ssh/id_rsa
          cp $(downloadPublicKey.secureFilePath) ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub

          # Adicionar dev.azure.com ao known_hosts
          ssh-keyscan -H dev.azure.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # Criar o arquivo de configuração do SSH e desabilitar host key checking
          echo -e "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
        displayName: '🔑 - Instalar Chave SSH'
   
      # - task: InstallSSHKey@0
      #   inputs:
      #     knownHostsEntry: 'dev.azure.com'
      #     sshKeySecureFile: 'id_rsa.pub'
      #     displayName: '🔑 - Instalar Chave SSH'
      
      - script: |
          sudo apt update
          sudo apt install -y git curl wget unzip jq
        displayName: '🧑‍🔧 - Instalar Pré-requisitos'

      - script: |
          set -e
          # Instalar tfenv e Terraform
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ~/.bash_profile
          mkdir -p ~/.local/bin/
          . ~/.profile
          ln -s ~/.tfenv/bin/* ~/.local/bin
          tfenv install ${{ parameters.terraform_version }}
          tfenv use ${{ parameters.terraform_version }}

          # Instalar Terragrunt
          curl -L -o /usr/local/bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ parameters.terragrunt_version }}/terragrunt_linux_amd64
          chmod +x /usr/local/bin/terragrunt

          # Verificar instalação correta do Terraform
          terraform --version | grep "${{ parameters.terraform_version }}" || { echo "Erro: Terraform não instalado corretamente!"; exit 1; }

          # Verificar instalação correta do Terragrunt
          terragrunt --version | grep "${{ parameters.terragrunt_version }}" || { echo "Erro: Terragrunt não instalado corretamente!"; exit 1; }

          echo "Terraform e Terragrunt instalados corretamente."
        displayName: '🌎 - Instalar Terraform e Terragrunt'
        
      # - bash: |
      #     az login --service-principal \
      #     --username $ARM_CLIENT_ID \
      #     --password $ARM_CLIENT_SECRET \
      #     --tenant $ARM_TENANT_ID
      #     az account set --subscription $ARM_SUBSCRIPTION_ID
      #     echo "Login no Azure realizado com sucesso."
      #   displayName: "\U0001F510 - Login no Azure"

      - script: |
          
          echo "🚀 - Testando Terragrunt em todo projeto" 
          

          echo "Primeiro vamos mostrar os valores das variáveis e segredos no shell"
          source  $(downloadAzFIle.secureFilePath)
          
          echo "executando deploy sem condicionais"
          cd environments/az-csh-dev && \
            terragrunt run-all ${{ parameters.action }} --terragrunt-non-interactive --terragrunt-no-color
        displayName: '🚀 - Executar Ação do Terragrunt'

      # # - script: |
      # #     RESOURCE_GROUP_NAME=terraform-state-csh
      # #       STORAGE_ACCOUNT_NAME=tfstatecsh
      # #       CONTAINER_NAME=tfstate
      # #       ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv)
      # #       export ARM_CLIENT_ID=$ARM_CLIENT_ID
      # #       export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
      # #       export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
      # #       export ARM_TENANT_ID=$ARM_TENANT_ID
      # #     terragrunt --terragrunt-no-color run-all validate \
      # #     --terragrunt-working-dir environments/${{ parameters.environment }}/${{ parameters.geo_location }} \
      # #     --terragrunt-include-external-dependencies \
      # #     --terragrunt-non-interactive
      # #   displayName: '✅ - Validar Configuração do Terragrunt'
       

      # # - script: |
      # #     terragrunt run-all plan \
      # #     --terragrunt-working-dir environments/${{ parameters.environment }}/${{ parameters.geo_location }}/${{ parameters.resource }} \
      # #     --terragrunt-include-external-dependencies \
      # #     --terragrunt-non-interactive
      # #   displayName: '📋 - Gerar Plano de Execução do Terragrunt'
      # #   condition: eq('${{ parameters.action }}', 'plan')

      # # - script: |
      # #       RESOURCE_GROUP_NAME=terraform-state-csh
      # #       STORAGE_ACCOUNT_NAME=tfstatecsh
      # #       CONTAINER_NAME=tfstate
      # #       ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv)
      # #       export ARM_CLIENT_ID=$ARM_CLIENT_ID
      # #       export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
      # #       export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
      # #       export ARM_TENANT_ID=$ARM_TENANT_ID          
      # #       scripts/deploy.sh  -e "${{ parameters.environment }}" -s "${{ parameters.geo_location }}""
      # #   displayName: '🚀 - Aplicar Mudanças com Terragrunt'
      # #   condition: eq('${{ parameters.action }}', 'apply')

      # # - script: |
      # #       RESOURCE_GROUP_NAME=terraform-state-csh
      # #       STORAGE_ACCOUNT_NAME=tfstatecsh
      # #       CONTAINER_NAME=tfstate
      # #       ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv)
      # #       export ARM_CLIENT_ID=$ARM_CLIENT_ID
      # #       export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
      # #       export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
      # #       export ARM_TENANT_ID=$ARM_TENANT_ID     
      # #       scripts/deploy.sh  -e "${{ parameters.environment }}" -s ${{ parameters.geo_location }}
      # #   displayName: '🚀 - Aplicar Mudanças com Terragrunt'
      # #   condition: and(eq('${{ parameters.action }}', 'apply') , eq('${{ parameters.deploy_all_resources }}', true))