name: üèóÔ∏è Terragrunt CI/CD

on:
  push:
    branches:
      - main
      - feature/*
    paths:
      - 'terraform/**'
      - 'terragrunt/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'terragrunt/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'üîß A√ß√£o a executar'
        required: true
        default: 'plan'
        type: choice
        options:
          - init
          - validate
          - plan
          - apply
          - destroy
          - output
      terraform_version:
        description: 'üåê Vers√£o do Terraform'
        required: true
        default: '1.10.5'
        type: choice
        options:
          - '1.10.5'
          - '1.9.8'
          - '1.8.0'
          - '1.7.5'
          - 'latest'
      terragrunt_version:
        description: 'üåê Vers√£o do Terragrunt'
        required: true
        default: '0.73.14'
        type: choice
        options:
          - '0.73.14'
          - '0.67.9'
          - '0.53.8'
          - '0.48.0'
          - 'latest'
      environment:
        description: 'üåê Ambiente'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - hml
          - prod
      region:
        description: 'üåç Regi√£o'
        required: true
        default: 'eastus2'
        type: choice
        options:
          - eastus2
          - brazilsouth

env:
  # Vari√°veis de ambiente
  ENV_NAME: ${{ github.event.inputs.environment || 'dev' }}
  REGION: ${{ github.event.inputs.region || 'eastus2' }}
  ACTION: ${{ github.event.inputs.action || 'plan' }}
  # Configura√ß√µes do backend
  TF_STATE_RG: "rg-terragrunt-state"
  TF_STATE_SA: "stterragruntstate"
  TF_STATE_CONTAINER: "tg-tfstate"

jobs:
  terragrunt:
    name: üöÄ Terragrunt ${{ github.event.inputs.action || 'plan' }}
    runs-on: self-hosted
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîë Configurar SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: ‚öôÔ∏è Instalar tfenv e tgenv
        run: |
          echo "Instalando pr√©-requisitos..."

          echo "Instalando Terraform Version Manager (tfenv)..."
          if [ ! -d "$HOME/.tfenv" ]; then
            git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          fi
          mkdir -p ~/.local/bin/
          ln -sf ~/.tfenv/bin/* ~/.local/bin/
          export PATH="$HOME/.tfenv/bin:$PATH"
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.tfenv/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          echo "Instalando Terragrunt Version Manager (tgenv)..."
          if [ ! -d "$HOME/.tgenv" ]; then
            git clone --depth=1 --branch main https://github.com/tgenv/tgenv.git ~/.tgenv
          fi
          export PATH="$HOME/.tgenv/bin:$PATH"
          echo "$HOME/.tgenv/bin" >> $GITHUB_PATH

          # Verificar instala√ß√£o
          echo "Verificando instala√ß√£o do tfenv..."
          which tfenv || echo "tfenv n√£o encontrado no PATH"

          echo "Verificando instala√ß√£o do tgenv..."
          which tgenv || echo "tgenv n√£o encontrado no PATH"

          # Listar diret√≥rios para debug
          echo "Conte√∫do de ~/.tfenv/bin:"
          ls -la ~/.tfenv/bin || echo "Diret√≥rio n√£o encontrado"

          echo "Conte√∫do de ~/.tgenv/bin:"
          ls -la ~/.tgenv/bin || echo "Diret√≥rio n√£o encontrado"

          echo "PATH atual:"
          echo $PATH

      - name: ‚öôÔ∏è Instalar Terraform e Terragrunt
        run: |
          # Definir vers√£o do Terraform
          TF_VERSION="${{ github.event.inputs.terraform_version || '1.10.5' }}"
          if [ "$TF_VERSION" = "latest" ]; then
            TF_VERSION=$(tfenv list-remote | grep -v "-" | head -n 1)
            echo "Usando a vers√£o mais recente do Terraform: $TF_VERSION"
          fi

          # Instalar e usar a vers√£o do Terraform
          echo "Instalando Terraform $TF_VERSION..."
          tfenv install $TF_VERSION
          tfenv use $TF_VERSION
          terraform --version

          # Definir vers√£o do Terragrunt
          TG_VERSION="${{ github.event.inputs.terragrunt_version || '0.73.14' }}"
          if [ "$TG_VERSION" = "latest" ]; then
            TG_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
            echo "Usando a vers√£o mais recente do Terragrunt: $TG_VERSION"
          fi

          # Instalar e usar a vers√£o do Terragrunt
          echo "Instalando Terragrunt $TG_VERSION..."
          tgenv install $TG_VERSION
          tgenv use $TG_VERSION
          terragrunt --version

      - name: ‚úÖ Validar sintaxe
        if: ${{ env.ACTION != 'destroy' }}
        run: |
          echo "Formatando e validando arquivos Terraform..."
          terraform fmt --check --recursive ./terraform || true

          echo "Formatando e validando arquivos Terragrunt..."
          terragrunt hclfmt --check --working-dir ./terragrunt || true

      - name: üîÑ Executar Terragrunt ${{ github.event.inputs.action || 'plan' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          set -e
          echo "Executando Terragrunt ${{ env.ACTION }} para ${{ env.ENV_NAME }} em ${{ env.REGION }}"
          mkdir -p /tmp/.terragrunt-cache/.plugins
          
          # Verificar se as vari√°veis foram exportadas corretamente (n√£o mostra o valor, apenas se existe)
          echo "Verificando vari√°veis de ambiente:"
          echo "ARM_CLIENT_ID: $(if [ -n "$ARM_CLIENT_ID" ]; then echo "definido"; else echo "n√£o definido"; fi)"
          echo "ARM_CLIENT_SECRET: $(if [ -n "$ARM_CLIENT_SECRET" ]; then echo "definido"; else echo "n√£o definido"; fi)"
          echo "ARM_SUBSCRIPTION_ID: $(if [ -n "$ARM_SUBSCRIPTION_ID" ]; then echo "definido"; else echo "n√£o definido"; fi)"
          echo "ARM_TENANT_ID: $(if [ -n "$ARM_TENANT_ID" ]; then echo "definido"; else echo "n√£o definido"; fi)"

          # Navegando para o diret√≥rio do ambiente
          cd terragrunt/environments/${{ env.ENV_NAME }}/${{ env.REGION }}

          # Executando a a√ß√£o solicitada
          case "${{ env.ACTION }}" in
            init)
              terragrunt run-all init --non-interactive
              ;;
            validate)
              terragrunt run-all validate --non-interactive
              ;;
            plan)
              # Gerar plano detalhado
              terragrunt run-all plan --non-interactive 
              ;;
            apply)
              terragrunt run-all apply --non-interactive --auto-approve
              ;;
            destroy)
              terragrunt run-all destroy --non-interactive --auto-approve
              ;;
            output)
              terragrunt run-all output --non-interactive
              ;;
          esac

      - name: üìã Mostrar outputs
        if: ${{ success() && (env.ACTION == 'apply' || env.ACTION == 'output') }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          echo "Coletando outputs..."
          cd terragrunt/environments/${{ env.ENV_NAME }}/${{ env.REGION }}
          terragrunt run-all output --non-interactive || true

  validation:
    name: ‚úì Validar Implanta√ß√£o
    needs: terragrunt
    if: ${{ success() && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'prod' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: üîç Valida√ß√£o manual
        run: |
          echo "Implanta√ß√£o em produ√ß√£o conclu√≠da com sucesso!"
          echo "Por favor, valide a implanta√ß√£o em produ√ß√£o e confirme se est√° tudo correto." 