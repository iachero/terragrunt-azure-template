trigger:
  branches:
    include:
    - main
    - feature/*
  paths:
    include:
    - terraform/**
    - terragrunt/**

parameters:
  - name: action
    displayName: |
      üîß A√ß√£o a executar:
      - init: Inicializa o Terragrunt
      - validate: Valida a configura√ß√£o
      - plan: Gera plano de execu√ß√£o
      - apply: Aplica mudan√ßas
      - destroy: Remove infraestrutura
      - output: Mostra outputs
    default: plan
    type: string
    values:
      - init
      - validate
      - plan
      - apply
      - destroy
      - output

  - name: terraform_version
    displayName: 'üåê Vers√£o do Terraform'
    default: '1.10.5'
    type: string
    values:
      - '1.10.5'
      - '1.9.8'
      - '1.8.0'
      - '1.7.5'
      - 'latest'

  - name: terragrunt_version
    displayName: 'üåê Vers√£o do Terragrunt'
    default: '0.73.14'
    type: string
    values:
      - '0.73.14'
      - '0.67.9'
      - '0.53.8'
      - '0.48.0'
      - 'latest'

  - name: environment
    displayName: 'üåê Ambiente'
    default: 'dev'
    type: string
    values:
      - dev
      - hml
      - prod

  - name: region
    displayName: 'üåç Regi√£o'
    default: 'eastus2'
    type: string
    values:
      - eastus2
      - brazilsouth

variables:
  # Vari√°veis de ambiente
  ENV_NAME: ${{ parameters.environment }}
  REGION: ${{ parameters.region }}
  
  # Configura√ß√µes do backend
  TF_STATE_RG: 'rg-terragrunt-state'
  TF_STATE_SA: 'stterragruntstate'
  TF_STATE_CONTAINER: 'tg-tfstate'
stages:
- stage: Infrastructure
  displayName: 'üèóÔ∏è Infraestrutura como C√≥digo'
  jobs:
  - job: TerragruntJob
    displayName: 'üöÄ Terragrunt ${{ parameters.action }}'
    pool:
      vmImage: 'ubuntu-24.04'
    steps:
    # Instalar tfenv e tgenv
    - bash: |
        echo "Instalando pr√©-requisitos..."
        
        echo "Instalando Terraform Version Manager (tfenv)..."
        if [ ! -d "$HOME/.tfenv" ]; then
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
        fi
        mkdir -p ~/.local/bin/
        ln -sf ~/.tfenv/bin/* ~/.local/bin/
        export PATH="$HOME/.tfenv/bin:$PATH"
        export PATH="$HOME/.local/bin:$PATH"
        echo "##vso[task.prependpath]$HOME/.tfenv/bin"
        echo "##vso[task.prependpath]$HOME/.local/bin"

        echo "Instalando Terragrunt Version Manager (tgenv)..."
        if [ ! -d "$HOME/.tgenv" ]; then
          git clone --depth=1 --branch main https://github.com/tgenv/tgenv.git ~/.tgenv
        fi
        export PATH="$HOME/.tgenv/bin:$PATH"
        echo "##vso[task.prependpath]$HOME/.tgenv/bin"
        
        # Verificar instala√ß√£o
        echo "Verificando instala√ß√£o do tfenv..."
        which tfenv || echo "tfenv n√£o encontrado no PATH"
        
        echo "Verificando instala√ß√£o do tgenv..."
        which tgenv || echo "tgenv n√£o encontrado no PATH"
        
        # Listar diret√≥rios para debug
        echo "Conte√∫do de ~/.tfenv/bin:"
        ls -la ~/.tfenv/bin || echo "Diret√≥rio n√£o encontrado"
        
        echo "Conte√∫do de ~/.tgenv/bin:"
        ls -la ~/.tgenv/bin || echo "Diret√≥rio n√£o encontrado"
        
        echo "PATH atual:"
        echo $PATH
      displayName: '‚öôÔ∏è Install tfenv e tgenv'

    # Instalar vers√µes espec√≠ficas do Terraform e Terragrunt
    - bash: |
        # Definir vers√£o do Terraform
        TF_VERSION="${{ parameters.terraform_version }}"
        if [ "$TF_VERSION" = "latest" ]; then
          TF_VERSION=$(tfenv list-remote | grep -v "-" | head -n 1)
          echo "Usando a vers√£o mais recente do Terraform: $TF_VERSION"
        fi

        # Instalar e usar a vers√£o do Terraform
        echo "Instalando Terraform $TF_VERSION..."
        tfenv install $TF_VERSION
        tfenv use $TF_VERSION
        terraform --version

        # Definir vers√£o do Terragrunt
        TG_VERSION="${{ parameters.terragrunt_version }}"
        if [ "$TG_VERSION" = "latest" ]; then
          TG_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo "Usando a vers√£o mais recente do Terragrunt: $TG_VERSION"
        fi

        # Instalar e usar a vers√£o do Terragrunt
        echo "Instalando Terragrunt $TG_VERSION..."
        tgenv install $TG_VERSION
        tgenv use $TG_VERSION
        terragrunt --version
      displayName: '‚öôÔ∏è Use Terraform e Terragrunt'

    # Valida√ß√£o de c√≥digo (somente quando a a√ß√£o n√£o √© destroy)
    - bash: |
        echo "Formatando e validando arquivos Terraform..."
        terraform fmt --check --recursive ./terraform || true
        
        echo "Formatando e validando arquivos Terragrunt..."
        terragrunt hclfmt --check --working-dir ./terragrunt || true
      # terragrunt hclvalidate --working-dir ./terragrunt || true
      displayName: '‚úÖ Validate Sintaxe'
      condition: and(succeeded(), ne('${{ parameters.action }}', 'destroy'))

    # Executar a√ß√£o do Terragrunt baseada no par√¢metro
    - task: AzureCLI@2
      displayName: 'üîÑ Terragrunt ${{ parameters.action }}'
      inputs:
        azureSubscription: 'SP-MPN'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          echo "Executando Terragrunt ${{ parameters.action }} para $(ENV_NAME) em $(REGION)"
          
          # Navegando para o diret√≥rio do ambiente
          cd terragrunt/environments/$(ENV_NAME)/$(REGION)
          
          # Executando a a√ß√£o solicitada
          case "${{ parameters.action }}" in
            init)
              terragrunt run-all init --non-interactive
              ;;
            validate)
              terragrunt run-all validate --non-interactive
              ;;
            plan)
              # Criar diret√≥rio para planos
              mkdir -p $(Build.ArtifactStagingDirectory)/plans
              
              # Gerar plano detalhado
              terragrunt run-all plan --non-interactive --out=$(Build.ArtifactStagingDirectory)/plans/tfplan.binary
              
              # Criar resumo leg√≠vel do plano
              cd $(Build.ArtifactStagingDirectory)/plans
              if [ -f "tfplan.binary" ]; then
                terraform show -no-color tfplan.binary > plan.txt
                echo "Resumo do plano:" > plan_summary.txt
                cat plan.txt | grep -E 'Plan:|will be created|will be destroyed|will be updated' >> plan_summary.txt
                echo "---"
                cat plan_summary.txt
              fi
              ;;
            apply)
              terragrunt run-all apply --non-interactive --auto-approve
              ;;
            destroy)
              terragrunt run-all destroy --non-interactive --auto-approve
              ;;
            output)
              terragrunt run-all output --non-interactive
              ;;
          esac

    # Publicar artefatos se estiver em modo de plano
    - task: PublishPipelineArtifact@1
      displayName: 'üì¶ Publicar artefatos do plano'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/plans'
        artifact: 'TerraformPlan'
        publishLocation: 'pipeline'
      condition: and(succeeded(), eq('${{ parameters.action }}', 'plan'))

    # Outputs em caso de apply ou output
    - bash: |
        if [[ "${{ parameters.action }}" == "apply" || "${{ parameters.action }}" == "output" ]]; then
          echo "Coletando outputs..."
          cd terragrunt/environments/$(ENV_NAME)/$(REGION)
          terragrunt run-all output --non-interactive || true
        fi
      displayName: 'üìã Mostrar outputs'
      condition: and(succeeded(), or(eq('${{ parameters.action }}', 'apply'), eq('${{ parameters.action }}', 'output')))

- stage: Validation
  displayName: 'üîç Valida√ß√£o'
  dependsOn: Infrastructure
  # Somente executar est√°gio de valida√ß√£o ap√≥s aplicar mudan√ßas em produ√ß√£o
  condition: and(succeeded(), eq('${{ parameters.action }}', 'apply'), eq('${{ parameters.environment }}', 'prod'))
  jobs:
  - job: ValidationJob
    displayName: '‚úì Validar Implanta√ß√£o'
    pool: server
    steps:
    - task: ManualValidation@1
      timeoutInMinutes: 1440 # 24 horas
      inputs:
        notifyUsers: '$(BUILD_REQUESTEDFOR)'
        instructions: 'Por favor, valide a implanta√ß√£o em produ√ß√£o e confirme se est√° tudo correto.'
        onTimeout: 'resume'